#!/usr/bin/env perl

use strict;
use warnings;
use File::Copy::Recursive qw(dircopy);
use File::Path;
use File::Temp qw(tempfile);
use Getopt::Long;
use Path::Tiny qw(path);

# query expected environment variables
my $release;
my $overwrite=0;

if(defined $ENV{'Version'}) {
    $release = $ENV{'Version'};
} else {
    die "Version environment variable not set!\n";
}

if(defined $ENV{'OverWritePrevoius'} ) {
    if ($ENV{'OverWritePrevious'} eq "true") { $overwrite=1; }
} 

my @arches = ('aarch64', 'x86_64');
my @distros = ('Leap_15','CentOS_8');

my $base_repo_path = "/repos/.staging/OpenHPC";
my $dest_dir = "/repos/dist/$release";
my $tmp_path = "/stage/dist/tmp";

# basic usage
sub usage { 
    print "\n";
    print "Usage: mk_dist [OPTIONS]\n\n";
    print "OPTIONS:\n";
    print "  --pre-release         use OBS Factory repository\n";
    print "  --skip-copy           skip copying of repo data (for debug only)\n";
    print "  --help                generate help message and exit\n";
    print "\n";
    exit 0;
}

sub add_repo_file {
    my $repoFile     = shift;
    my $micro        = shift;
    my $base_release = shift;
    my $release      = shift;
    my $distro       = shift;
    my $isSrcRepo    = shift;
    
    print "Adding [base] repofile contents -> $repoFile\n";

    File::Copy::copy("repo.base.in","$repoFile") || die "Unable to copy repo.base.in\n";
    if($micro) {
	print "Appending [update] repo\n";
	open (BASE, ">>","$repoFile") || die "Unable to append to repo file\n";
	open (UPDATE,"<","repo.update.in") || die "Unable to access repo.update.in\n";
	print BASE <UPDATE>;
	close BASE;
	close UPDATE;
    }

    # Update version strings in .repo file

    my $file_update = path($repoFile);
    my $contents    = $file_update->slurp_utf8;
    $contents       =~ s/\@VERSION_MINOR\@/$base_release/g;
    $contents       =~ s/\@VERSION_MICRO\@/$release/g;
    $contents       =~ s/\@DISTRO\@/$distro/g;
    if( $isSrcRepo ) {
	$contents   =~ s/- Base/- Base Sources/g;
	$contents   =~ s/- Updates/- Updates Sources/g;
    }
    $file_update->spew_utf8( $contents );

	
}

sub add_readme_file {
    my $arch                = shift;
    my $distro              = shift;
    my $micro               = shift;
    my $release             = shift;
    my $repoFile            = shift;
    my $tmp_dir             = shift;
    my $package_manager     = "";
    my $package_manager_dir = "";

	print "Adding README\n";

    if ($distro =~ m/CentOS*/) {
        $package_manager = "yum";
        $package_manager_dir = "/etc/yum.repos.d";
    }
    if ($distro =~ m/SLE_*/) {
        $package_manager = "zypper";
        $package_manager_dir = "/etc/zypp/repos.d";
    }

    File::Copy::copy("README.in","$tmp_dir/README") || die "Unable to copy README.in\n";
    my $file_update = path("$tmp_dir/README");
    my $contents    = $file_update->slurp_utf8;
    $contents       =~ s/\@ARCH\@/$arch/g;
    $contents       =~ s/\@DISTRO\@/$distro/g;
    $contents       =~ s/\@PACKAGE_MANAGER\@/$package_manager/g;
    $contents       =~ s/\@PACKAGE_MANAGER_DIR\@/$package_manager_dir/g;
    $contents       =~ s/\@VERSION\@/$release/g;
    $file_update->spew_utf8( $contents );

    #append new OpenHPC.local.repo 
    my $repo = path($repoFile);
    my $repo_contents = $repo->slurp_utf8;
    $repo_contents    =~ s/\@PATH\@/\/opt\/ohpc\/repos/g;
    $file_update->append_utf8($repo_contents);
}


# enable autoflush
$| = 1;

# Command-line parsing
my $preRelease = 0;
my $skipCopy = 0;
my $help = 0;

GetOptions('pre-release' => \$preRelease,
        'skip-copy' => \$skipCopy,
        "h"             => \$help,
        "help"          => \$help);

usage() if ($help);


if ( ! -d $dest_dir ) {
    File::Path::make_path($dest_dir) || die("Unable to create $dest_dir\n");
}

print "OpenHPC dist creation utility\n";
print "--> Requested release version = $release\n";
print "--> Overwrite existing dists  = $overwrite\n";

if($preRelease) {
    print "--> Build from factory pre-release = 1\n";
}

if($skipCopy) {
    print "--> Debug skipCopy option     = 1\n";
}

# parse release
my ($major, $minor, $micro) = split(/\./, $release);
my $base_release = "$major";

# stage repo in tmp

if (! -d $tmp_path) {
    File::Path::make_path($tmp_path) || die("Unable to create $tmp_path\n");
}

my $tmp_dir = File::Temp::tempdir(CLEANUP => 1, DIR=> $tmp_path) || MYERROR("Unable to create temporary directory");

print "\nStaging dist creation in $tmp_dir...\n";

if( !$skipCopy) {

    # copy base repo contents
    print "\nCopying base repo contents from OBS...\n";
    if ($preRelease) {
        unless(dircopy("$base_repo_path/$base_release:/Factory", $tmp_dir)) {
            die "Unable to copy $base_repo_path/$base_release:/Factory to $tmp_dir: $!";
        }
    } else {
        unless(dircopy("$base_repo_path/$base_release", $tmp_dir)) {
            die "Unable to copy $base_repo_path/$base_release to $tmp_dir: $!";
        }
    }
    print "--> base repo copy complete\n";

   # build update repo
    if ($micro) {
        #TODO: support update repo merge
        print "\nCopying updates\n";
        unlink "$tmp_dir/updates" || warn "Unable to remove updates link: $!";
        rmtree "$tmp_dir/empty" || warn "Unable to remove empty dir: $!";
        if ($preRelease) {
            dircopy("$base_repo_path/$base_release:/Update$micro:/Factory/*", "$tmp_dir/updates") ||
                die "Unable to copy $base_repo_path/$base_release:/Update$micro repo: $!";
        } else {
            dircopy("$base_repo_path/$base_release:/Update$micro/*", "$tmp_dir/updates") ||
                die "Unable to copy $base_repo_path/$base_release:/Update$micro repo: $!";
        }
    }
}

# build dist

foreach my $distro (@distros) {
    if ($micro) {
	dircopy("$tmp_dir/updates/$distro", "$tmp_dir/$distro/updates");
    }
    my @n_distros = grep { $_ ne $distro } @distros;
    # generate binary tarballs
    foreach my $arch (@arches) {
	my $dist_filename = "$dest_dir/OpenHPC-$release.$distro.$arch.tar";
	my $tar_args = "-cvf $dist_filename \\\n";

	
	# exclude other arches, iso and src dirs
	my @n_arches = grep { $_ ne $arch } @arches;
	for my $n_arch (@n_arches) {
	    $tar_args .= "--exclude $distro/$n_arch \\\n";
	    if ($micro) {
		    $tar_args .= "--exclude $distro/updates/$n_arch \\\n";
	    }
	}
	$tar_args .= "--exclude $distro/iso \\\n";
	$tar_args .= "--exclude $distro/src \\\n";
	
	# exclude any other distro updates
	if ($micro) {
	    for my $n_distro (@n_distros) {
		$tar_args .= "--exclude $distro/updates/$n_distro \\\n";
		$tar_args .= "--exclude $distro/updates/src \\\n";
	    }
	}

	# exclude any OBS created .repo files
	$tar_args .= "--exclude $distro/OpenHPC*.repo \\\n";
	$tar_args .= "--exclude $distro/updates/OpenHPC*.repo \\\n";

	# exclude repocache
	$tar_args .= "--exclude $distro/repocache \\\n";
	$tar_args .= "--exclude $distro/updates/repocache \\\n";

	# cd to $tmp_dir
	$tar_args .= "-C $tmp_dir \\\n";

	# verify path exists
	if($skipCopy) {
	    File::Path::make_path("$tmp_dir/$distro") || die("Unable to create $tmp_dir/$distro\n");
	}

	# add binary .repo file
	my $isSrcRepo=0;
	add_repo_file("$tmp_dir/OpenHPC.local.repo",$micro,$base_release,$release,$distro,$isSrcRepo);

	# add README file
	add_readme_file($arch, $distro, $micro, $release, "$tmp_dir/OpenHPC.local.repo", $tmp_dir);

	# Copy make_repo.sh utility
	print "Adding make_repo.sh utility\n";
	File::Copy::copy("make_repo.sh","$tmp_dir") || die "Unable to copy make_repo.sh\n";
	chmod 0700, "$tmp_dir/make_repo.sh" || die "Unable to set perms for make_repo.sh\n";

	# Assemble final tarball
	$tar_args .= "$distro make_repo.sh OpenHPC.local.repo README";
	print "\nCreating dist tarball for $distro:$arch -- \n";
	print "\ntar command -> tar $tar_args\n\n";
	system("tar $tar_args") == 0 || die "Unable to execute $distro:$arch tar command: $!";

    } # end loop over @arches
    
    # generate src tarball
    my $src_filename = "$dest_dir/OpenHPC-$release.$distro.src.tar";
    my $tar_args = "-cvf $src_filename \\\n";

    for my $arch (@arches) {
	$tar_args .= "--exclude $distro/$arch \\\n";
    }
	$tar_args .= "--exclude $distro/noarch \\\n";

    # exclude any other distro/arch updates
    if ($micro) {
	for my $arch (@arches) {
	    $tar_args .= "--exclude $distro/updates/$arch \\\n";
	}
	$tar_args .= "--exclude $distro/updates/noarch \\\n";
	for my $n_distro (@n_distros) {
	    $tar_args .= "--exclude $distro/updates/$n_distro \\\n";
	    $tar_args .= "--exclude $distro/updates/$distro/noarch \\\n";
	}
    }

    # exclude any OBS created .repo files
    $tar_args .= "--exclude $distro/OpenHPC*.repo \\\n";
    $tar_args .= "--exclude $distro/updates/OpenHPC*.repo \\\n";

	# exclude repocache
	$tar_args .= "--exclude $distro/repocache \\\n";
	$tar_args .= "--exclude $distro/updates/repocache \\\n";

    # add sources .repo file
    my $isSrcRepo=1;
    add_repo_file("$tmp_dir/OpenHPC.local.repo",$micro,$base_release,$release,$distro,$isSrcRepo);
    
	# add README file
    my $arch = "src";
	add_readme_file($arch, $distro, $micro, $release, "$tmp_dir/OpenHPC.local.repo", $tmp_dir);

    $tar_args .= "--exclude $distro/iso \\\n";
    $tar_args .= "-C $tmp_dir \\\n";
    $tar_args .= "$distro make_repo.sh OpenHPC.local.repo README";

    print "\nCreating dist tarball for $distro:src -- \n";
    print "\ntar command -> tar $tar_args\n\n";
    system("tar $tar_args") == 0 || die "Unable to execute $distro:src tar command: $!";
    
} # end loop over @distros

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4 
